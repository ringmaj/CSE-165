#ifndef GRPLOT_H
#define GRPLOT_H

#include "GrRect.h"






using namespace std;

class Vec {
  #include <iostream>
 public:
  static Vec null;
  float x;
  float y;
  Vec();
  Vec(float a, float b);
  void add(Vec v);
  void print();
};

Vec::Vec() {
  x = 0;
  y = 0;
}

Vec::Vec(float a, float b) {
  x = a;
  y = b;
}

void Vec::add(Vec v) {
  x = x + v.x;
  y = y + v.y;
}

void Vec::print() { cout << "(" << x << ", " << y << ")" << endl; }



class QuadraticCurve : public GrRect {
 public:
  vector<Vec>points;
   void generate(float xini, float xend, float inc);
   void add(float x, float y);
  Vec max();
};

QuadraticCurve::QuadraticCurve(float a, float b, float c) {
  this->a = a;
  this->b = b;
  this->c = c;


}

void QuadraticCurve::add(float x, float y) {
  
  Vec a = Vec(x, y);
  points.push_back(a);
 
}

void QuadraticCurve::generate(float xini, float xend, float inc) {
  int y;
  int x = xini;
  while (x <= xend) {
    y = (a * x * x) + (b * x) + c;
    add(x,y);
    x += inc;
  }
}

Vec QuadraticCurve::max() {
  Vec tmp = Vec(0, 0);
  for (int i = 0; i < points.size(); i++) {
    if (points[i].x > tmp.x && points[i].y > tmp.y) {
      tmp = Vec(points[i].x, points[i].y);
    }
  }

  return tmp;
}

















class QuadraticCurve : public XYData {
 public:
  float a, b, c;
  QuadraticCurve(float a, float b, float c);
  void generate(float xini, float xend, float inc);
  void add(float x, float y);
};

QuadraticCurve::QuadraticCurve(float a, float b, float c) {
  this->a = a;
  this->b = b;
  this->c = c;


}

void QuadraticCurve::add(float x, float y) {
  
  Vec a = Vec(x, y);
  points.push_back(a);
 
}

void QuadraticCurve::generate(float xini, float xend, float inc) {
  int y;
  int x = xini;
  while (x <= xend) {
    y = (a * x * x) + (b * x) + c;
    add(x,y);
    x += inc;
  }
}

class CubicCurve : public XYData {
 public:
  float a, b, c, d;
  CubicCurve(float a, float b, float c, float d);
 void generate(float x, float xend, float inc);
};

CubicCurve::CubicCurve(float a, float b, float c, float d) {
  this->a = a;
  this->b = b;
  this->c = c;
  this->d = d;
}

void CubicCurve::generate(float xini, float xend, float inc) {
 int y;
 int x = xini;
  while (x <= xend) {
    y = (a * x * x* x) + (b * x*x) + (c*x) + d;
    add(x,y);
    x += inc;
  }

}






class GrPlotQuadratic : public GrRect {




};


class GrPlotCubic : public GrRect {




};




#endif